name: armbian-v23.11-CI-G

on:
  workflow_dispatch:

env:
  SCRIPT_REPO: ${{ github.repository }}
  SCRIPT_REF: ${{ github.ref_name }}
  UBOOT_REPO: hzyitc/u-boot-onecloud
  UBOOT_RELEASE: latest
  UBOOT_BURNIMG: eMMC.burn.img
  ARMBIAN_REPO: armbian/build
  ARMBIAN_REF: v23.11
  PATCHES: 4077,5076
  PATCHES_DISABLED: 5082

permissions:
  contents: write

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-22.04
    outputs:
      env: ${{ steps.get.outputs.env }}
    steps:
      - id: get
        name: Get repositories information
        run: |
          TIME="$(curl https://api.github.com/repos/${SCRIPT_REPO}/actions/runs/${GITHUB_RUN_ID} | jq -r .created_at)"
          TAG="ci-$(date -d "${TIME}" -u +'%Y%m%d-%H%M%S-%Z')"
          
          SCRIPT_SHA=$(curl https://api.github.com/repos/${SCRIPT_REPO}/commits/${SCRIPT_REF} | jq -r .sha)
          UBOOT_TAG=$(curl https://api.github.com/repos/${UBOOT_REPO}/releases/${UBOOT_RELEASE} | jq -r .tag_name)
          ARMBIAN_SHA=$(curl https://api.github.com/repos/${ARMBIAN_REPO}/commits/${ARMBIAN_REF} | jq -r .sha)
          
          cat <<EOF | sed -E 's/^  //' >>$GITHUB_ENV
            TIME=$TIME
            TAG=$TAG
            SCRIPT_SHA=$SCRIPT_SHA
            UBOOT_TAG=$UBOOT_TAG
            ARMBIAN_SHA=$ARMBIAN_SHA
          EOF
          echo "env=$(cat $GITHUB_ENV | base64 -w 0)" >>$GITHUB_OUTPUT

      - name: Show repositories information
        run: |
          C_RESET="\e[0m"
          C_BLACK="\e[30m"
          C_RED="\e[31m"
          C_GREEN="\e[32m"
          C_YELLOW="\e[33m"
          C_BLUE="\e[34m"
          C_MAGENTA="\e[35m"
          C_CYAN="\e[36m"
          C_GRAY="\e[37m"

          echo -e "$(cat <<EOF | sed -E 's/^  //'
            TIME: ${C_GREEN}$(date -d "$TIME" +'%Y-%m-%d %H:%M:%S %Z(%:z)')${C_RESET}
            Script: ${C_BLUE}${SCRIPT_REPO}${C_RESET}@${C_MAGENTA}${SCRIPT_REF}${C_RESET[](https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_REF})
                    ${C_YELLOW}${SCRIPT_SHA}${C_RESET[](https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_SHA})
            U-Boot: ${C_BLUE}${UBOOT_REPO}${C_RESET}@${C_MAGENTA}${UBOOT_RELEASE}${C_RESET[](https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_RELEASE})
                    ${C_MAGENTA}${UBOOT_TAG}${C_RESET[](https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_TAG})
            Armbian: ${C_BLUE}${ARMBIAN_REPO}${C_RESET}@${C_MAGENTA}${ARMBIAN_REF}${C_RESET[](https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_REF})
                     ${C_YELLOW}${ARMBIAN_SHA}${C_RESET[](https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_SHA})
          EOF
          )"

          if [[ -n "${PATCHES}" ]]; then
            echo -e "\nPatches:"
            while read -r id; do
              echo -e "  ${C_BLUE}armbian/build${C_RESET}#${C_MAGENTA}${id}${C_RESET[](http://github.com/armbian/build/pull/${id})"
            done < <(echo -e "${PATCHES}" | tr ',' '\n')
          fi

          cat <<EOF | sed -E 's/^  //' >>$GITHUB_STEP_SUMMARY
            # $(date -d "$TIME" +'%Y-%m-%d %H:%M:%S %Z(%:z)')

            ## Sources
            Script: [${SCRIPT_REPO}@${SCRIPT_REF}](https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_REF}) [](https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_SHA})
            U-Boot: [${UBOOT_REPO}@${UBOOT_RELEASE}](https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_RELEASE}) [](https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_TAG})
            Armbian: [${ARMBIAN_REPO}@${ARMBIAN_REF}](https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_REF}) [](https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_SHA})

            ${PATCHES:+$(
              echo "## Patches"
              echo "${PATCHES}" | tr ',' '\n' | sed -E 's|(.*)|[armbian/build#\1](http://github.com/armbian/build/pull/\1)|'
            )}
          EOF

      - name: Generate release informations
        run: |
          cat <<EOF | sed -E 's/^  //' | tee Release.md
            CI $(date -d "$TIME" +'%Y-%m-%d %H:%M:%S %Z(%:z)')

            # Sources
            Script: [${SCRIPT_REPO}@${SCRIPT_REF}](https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_REF}) [](https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_SHA})
            U-Boot: [${UBOOT_REPO}@${UBOOT_RELEASE}](https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_RELEASE}) [](https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_TAG})
            Armbian: [${ARMBIAN_REPO}@${ARMBIAN_REF}](https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_REF}) [](https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_SHA})

            ${PATCHES:+$(
              echo "# Patches"
              echo "${PATCHES}" | tr ',' '\n' | sed -E 's|(.*)|[armbian/build#\1](http://github.com/armbian/build/pull/\1)|'
            )}

            # SHA256
          EOF

          echo "NAME=$(head --line=1 Release.md)" >>$GITHUB_ENV
          tail --line=+2 Release.md >Body.md

      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{ env.TAG }}
          target_commitish: ${{ github.sha }}
          name: ${{ env.NAME }}
          body_path: Body.md

  build:
    name: Build
    needs: prepare
    runs-on: ubuntu-22.04
    steps:
      - name: Import env
        run: |
          echo "$(echo "${{ needs.prepare.outputs.env }}" | base64 -d)" >>$GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@main
        with:
          repository: ${{ env.ARMBIAN_REPO }}
          ref: ${{ env.ARMBIAN_SHA }}

      - name: "Apply patch ${{ env.PATCHES }}"
        if: ${{ env.PATCHES }}
        run: |
          echo 'Run lscpu:'
          lscpu
          echo 'Run df -h:'
          df -h
          echo 'Run ls -la /mnt:'
          ls -la /mnt
          echo 'Run free -h:'
          free -h
          
          sudo mkdir -p /mnt/Build-armbian-onecloud
          sudo chown $USER:$GROUPS /mnt/Build-armbian-onecloud
          
          echo 'current dir:'
          pwd
          
          echo ${{ github.workspace }}
          echo $GITHUB_WORKSPACE
          
          ln -sf /mnt/Build-armbian-onecloud ${{ github.workspace }}
          
          echo 'Run ls -la /mnt:'
          ls -la /mnt
          
          echo "::group::Download"
          curl -L -O "https://github.com/armbian/build/pull/{${PATCHES}}.patch"
          echo "::endgroup::"

          for file in *.patch; do
            echo "::group::Applying $file"
            patch --batch -p1 -N <"$file"
            echo "::endgroup::"
          done

      - name: Build debs for edge
        run: |
          rm -rf output/debs
          # Don't update remote cache
          export GITHUB_ACTIONS=false
          sudo --preserve-env \
            ./compile.sh kernel \
              ALLOW_ROOT=yes \
              BOARD=onecloud \
              BRANCH=edge \
              EXPERT=yes \
              USE_CCACHE=no
          sudo chown $(id -u):$(id -g) -R output/
          mkdir -p debs/edge
          mv output/debs/* debs/edge/ 2>/dev/null || true

      - name: Upload debs edge to release
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{ env.TAG }}
          files: |
            debs/edge/*

      - name: Build debs for current
        run: |
          rm -rf output/debs
          # Don't update remote cache
          export GITHUB_ACTIONS=false
          sudo --preserve-env \
            ./compile.sh kernel \
              ALLOW_ROOT=yes \
              BOARD=onecloud \
              BRANCH=current \
              EXPERT=yes \
              USE_CCACHE=no
          sudo chown $(id -u):$(id -g) -R output/
          mkdir -p debs/current
          mv output/debs/* debs/current/ 2>/dev/null || true

      - name: Upload debs current to release
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{ env.TAG }}
          files: |
            debs/current/*

      - name: Install Dependents
        run: |
          sudo apt install img2simg

          ver="v0.3.1"
          curl -L -o ./AmlImg https://github.com/hzyitc/AmlImg/releases/download/$ver/AmlImg_${ver}_linux_amd64
          chmod +x ./AmlImg

      - name: Download and unpack the latest u-boot
        run: |
          echo "::group::Download"
          curl -L -o ./uboot.img https://github.com/${UBOOT_REPO}/releases/download/${UBOOT_TAG}/${UBOOT_BURNIMG}
          echo "::endgroup::"

          echo "::group::Unpack"
          ./AmlImg unpack ./uboot.img burn/
          echo "::endgroup::"

      - name: Build images
        run: |
          for branch in edge current; do
            for release in jammy; do
              for type in minimal cli desktop; do
                build_minimal=no
                build_desktop=no
                des_env=
                des_config=
                des_apps=
                img_type=$type
                if [[ $type == "minimal" ]]; then
                  build_minimal=yes
                elif [[ $type == "desktop" ]]; then
                  build_desktop=yes
                  des_env=xfce
                  des_config=config_base
                  des_apps=""
                  img_type=xfce
                fi

                rm -rf output/debs output/images
                cp debs/${branch}/* output/debs/ 2>/dev/null || true

                # Don't update remote cache
                export GITHUB_ACTIONS=false
                sudo --preserve-env \
                  ./compile.sh build \
                    ALLOW_ROOT=yes \
                    BOARD=onecloud \
                    BRANCH=$branch \
                    RELEASE=$release \
                    KERNEL_CONFIGURE=no \
                    BUILD_MINIMAL=$build_minimal \
                    BUILD_DESKTOP=$build_desktop \
                    DESKTOP_ENVIRONMENT=$des_env \
                    DESKTOP_ENVIRONMENT_CONFIG_NAME=$des_config \
                    DESKTOP_APPGROUPS_SELECTED=$des_apps \
                    EXPERT=yes \
                    SKIP_EXTERNAL_TOOLCHAINS=yes \
                    CLEAN_LEVEL= \
                    USE_CCACHE=no \
                    COMPRESS_OUTPUTIMAGE=img
                sudo chown $(id -u):$(id -g) -R output/

                # Extract boot and rootfs partitions
                diskimg=$(ls output/images/*.img)
                loop=$(sudo losetup --find --show --partscan $diskimg)
                sudo img2simg ${loop}p1 burn/boot.simg
                sudo img2simg ${loop}p2 burn/rootfs.simg
                sudo losetup -d $loop
                sudo chown $(id -u):$(id -g) -R burn/

                # Generate burn image
                echo -n "sha1sum $(sha1sum burn/boot.simg | awk '{print $1}')" >burn/boot.VERIFY
                echo -n "sha1sum $(sha1sum burn/rootfs.simg | awk '{print $1}')" >burn/rootfs.VERIFY

                cat <<EOF >>burn/commands.txt
                PARTITION:boot:sparse:boot.simg
                VERIFY:boot:normal:boot.VERIFY
                PARTITION:rootfs:sparse:rootfs.simg
                VERIFY:rootfs:normal:rootfs.VERIFY
                EOF

                prefix=$(ls output/images/*.img | sed 's/\.img$//')
                burnimg=${prefix}.burn.img
                ./AmlImg pack $burnimg burn/

                # Hash and compress images
                > sha256sum
                for f in output/images/*.img; do
                  sha256sum "$f" | tee -a sha256sum
                  xz --threads=0 --compress "$f"
                done

                # Upload artifacts
                artifact_name="${release}-${branch}-${img_type}"
                actions/upload-artifact --name "$artifact_name" --path "output/images/*"

                # Generate release informations
                cat <<EOF | sed -E 's/^  //' | tee Release.md
                $(cat sha256sum | awk '{printf "%s: \`%s\`\n", \$2, \$1}')
                EOF

                # Upload to release
                actions/upload-release-asset --tag "${TAG}" --file "output/images/Armbian_*" --name "${artifact_name}"
              done
            done
          done
          
          echo 'Run lscpu:'
          lscpu
          echo 'Run df -h:'
          df -h
          echo 'Run ls -la /mnt:'
          ls -la /mnt
          echo 'Run free -h:'
          free -h

      - name: Upload to release
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{ env.TAG }}
          append_body: true
          body_path: Release.md
          files: |
            output/images/Armbian_*
